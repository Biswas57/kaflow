syntax = "proto3";

package tributary.stream;

option java_multiple_files = true;
option java_package        = "tributary.stream";
option java_outer_classname = "TributaryModels";

import "google/protobuf/any.proto";

message ProduceRequest {
  string producer_id  = 1;
  string topic_id     = 2;
  string partition_id = 3;              // ""  → broker decides
  uint64 sequence_no  = 4;              // monotonic counter per stream
  string payload_type      = 5;              // "text", "json", "binary", etc.
  bytes  key      = 6;              // ≤1000 bytes
  google.protobuf.Any payload   = 7;     
}

message ProduceAck {
  uint64 sequence_no  = 1;              // echo of request's seq-no
  string message_id   = 2;              // generated by broker
  string partition_id = 3;
  bool   success      = 4;
  string error_msg    = 5;              // empty when success = true
}


message SubscribeRequest {
  string consumer_id  = 1;        // auto-create if absent
  string group_id     = 2;
  string topic_id     = 3;
  uint64 from_offset  = 4;        // 0 ⇒ start from latest
}

message Event {
  string topic_id     = 1;
  string partition_id = 2;
  uint64 offset       = 3;
  google.protobuf.Any payload     = 4;        // one message per event
}

service TributaryStream {
  // Bi-directional streaming: client sends ProduceRequests,
  // server acks each one as a ProduceAck
  rpc Produce(stream ProduceRequest) returns (stream ProduceAck);

  // Server streaming: client sends one SubscribeRequest,
  // then server pushes Events forever
  rpc Subscribe(SubscribeRequest) returns (stream Event);

}
