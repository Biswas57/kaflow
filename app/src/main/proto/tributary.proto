syntax = "proto3";

package tributary.stream;

option java_multiple_files = true;
option java_package        = "tributary.stream";
option java_outer_classname = "TributaryModels";

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";

message ProduceRequest {
  string producer_id  = 1;
  string topic_id     = 2;
  optional string partition_id = 3;             
  string payload_type      = 4;              // "text", "json", "binary", etc.
  bytes  key      = 5;             
  google.protobuf.Any payload   = 6;
}

message ProduceAck {
  string message_id   = 1;              // generated by broker
  string partition_id = 2;
  bool   success      = 3;
  optional string error_msg    = 4;              // empty when success = true
}

message SubscribeRequest {
  string consumer_id  = 1;        
  string group_id     = 2;
  optional string partition_id = 3;  // Required by consumeEvent method
}

message Event {
  string topic_id     = 1;
  string partition_id = 2;
  uint64 offset       = 3;
  google.protobuf.Any payload     = 4;        
}

service TributaryStream {
  // Bi-directional streaming: client sends ProduceRequests,
  // server acks each one as a ProduceAck
  rpc Produce(stream ProduceRequest) returns (stream ProduceAck);

  // Server streaming: client sends one SubscribeRequest,
  // then server pushes Events forever
  rpc Subscribe(SubscribeRequest) returns (stream Event);
}
